{"version":3,"sources":["../../src/select.ts"],"sourcesContent":["import { CompoundQuery } from \"./compoundQuery.js\";\nimport { BaseQuery, Query } from \"./query.js\";\nimport { Where } from \"./where.js\";\n\n// Access the AliasGenerator from query.ts\nconst AliasGenerator = {\n  counter: 0,\n  generate(): string {\n    return `s${++this.counter}`;\n  }\n};\n\nexport class Select<T extends object> {\n  query: Query<T>;\n  fields: Partial<Record<keyof T, string>> = {};\n  subquery?: Query<any>;\n  subqueryAlias?: string;\n\n  constructor(query: Query<T>, fields: any, alias?: string) {\n    this.query = query;\n\n    // Check if fields is actually a Query (subquery)\n    if (fields && typeof fields === 'object' && 'select' in fields && typeof fields.select === 'function') {\n      this.subquery = fields as Query<any>;\n      this.subqueryAlias = alias || AliasGenerator.generate();\n      return;\n    }\n\n    if (Array.isArray(fields)) {\n      fields.forEach((field: keyof T) => {\n        this.fields[field] = field as string;\n      });\n      return;\n    }\n\n    if (fields && typeof fields === 'object') {\n      Object.entries(fields).forEach(([key, value]) => {\n        this.fields[key as keyof T] = value as string;\n      });\n    }\n    return;\n  }\n\n  private getSource(query: Query<any>): string {\n    if (query instanceof BaseQuery) {\n      return `${query.tableName} AS ${query.tableAlias}`;\n    } else if (query instanceof CompoundQuery) {\n      const left = this.getSource(query.query1);\n      const right = this.getSource(query.query2);\n      const on = Object.entries(query.joinInfo.condition || {})\n        .map(([key, value]) => {\n          // Get the rightmost table alias from the left side of the join\n          const leftAlias = this.getRightmostTableAlias(query.query1);\n          const rightAlias = this.getRightmostTableAlias(query.query2);\n          return `${leftAlias}.${String(key)} = ${rightAlias}.${String(value)}`;\n        })\n        .join(\" AND \");\n      const joinType = query.joinInfo.joinType;\n      return `${left} ${joinType} JOIN ${right} ON ${on}`;\n    } else if (query instanceof Where) {\n      return this.getSource(query.query);\n    }\n    return \"\";\n  }\n\n  private getRightmostTableAlias(query: Query<any>): string {\n    if (query instanceof BaseQuery) {\n      return query.tableAlias;\n    } else if (query instanceof CompoundQuery) {\n      // For compound queries, get the rightmost table alias (the most recently joined table)\n      return this.getRightmostTableAlias(query.query2);\n    } else if (query instanceof Where) {\n      return this.getRightmostTableAlias(query.query);\n    }\n    return \"\";\n  }\n\n  private formatCondition(key: string, value: any, tableAlias: string): string {\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      // Handle operators like $gt, $lt, etc.\n      const entries = Object.entries(value);\n      if (entries.length > 0) {\n        const [operator, operatorValue] = entries[0];\n        switch (operator) {\n          case '$eq': return `${tableAlias}.${key} = ${this.formatValue(operatorValue)}`;\n          case '$gt': return `${tableAlias}.${key} > ${this.formatValue(operatorValue)}`;\n          case '$lt': return `${tableAlias}.${key} < ${this.formatValue(operatorValue)}`;\n          case '$gte': return `${tableAlias}.${key} >= ${this.formatValue(operatorValue)}`;\n          case '$lte': return `${tableAlias}.${key} <= ${this.formatValue(operatorValue)}`;\n          case '$ne': return `${tableAlias}.${key} != ${this.formatValue(operatorValue)}`;\n          case '$in': return `${tableAlias}.${key} IN (${Array.isArray(operatorValue) ? operatorValue.map(v => this.formatValue(v)).join(', ') : this.formatValue(operatorValue)})`;\n          case '$like': return `${tableAlias}.${key} LIKE ${this.formatValue(operatorValue)}`;\n          default: return `${tableAlias}.${key} = ${this.formatValue(operatorValue)}`;\n        }\n      }\n    }\n    return `${tableAlias}.${key} = ${this.formatValue(value)}`;\n  }\n\n  private getWhereClause(query: Query<any>): string {\n    if (query instanceof Where) {\n      // Extract the inline \"or\" conditions from the main conditions\n      const { or: inlineOrConditions, ...mainConditions } = query.conditions;\n\n      // Process main conditions (excluding \"or\")\n      const conditions = Object.entries(mainConditions)\n        .map(([key, value]) => {\n          const tableAlias = this.getTableAliasForField(query, key);\n          return this.formatCondition(key, value, tableAlias);\n        })\n        .join(' AND ');\n\n      // Handle inline OR conditions\n      const inlineOrClauses = (inlineOrConditions || []).map(orCondition => {\n        const orClauses = Object.entries(orCondition)\n          .map(([key, value]) => {\n            const tableAlias = this.getTableAliasForField(query, key);\n            return this.formatCondition(key, value, tableAlias);\n          })\n          .join(' AND ');\n        return `(${orClauses})`;\n      });\n\n      // Handle chained OR conditions\n      const chainedOrConditions = query.orConditions.map(orCondition => {\n        const orClauses = Object.entries(orCondition.conditions)\n          .map(([key, value]) => {\n            const tableAlias = this.getTableAliasForField(query, key);\n            return this.formatCondition(key, value, tableAlias);\n          })\n          .join(' AND ');\n        return `(${orClauses})`;\n      });\n\n      // Combine all OR conditions\n      const allOrConditions = [...inlineOrClauses, ...chainedOrConditions];\n\n      let allConditions = conditions;\n      if (allOrConditions.length > 0) {\n        allConditions = allConditions ? `(${allConditions}) OR ${allOrConditions.join(' OR ')}` : allOrConditions.join(' OR ');\n      }\n\n      const nestedWhere = this.getWhereClause(query.query);\n      return nestedWhere ? `${allConditions} AND ${nestedWhere}` : allConditions;\n    }\n    return '';\n  }\n\n  private getTableAliasForField(query: Query<any>, _field: string): string {\n    // For now, just get the rightmost alias - in a more sophisticated implementation,\n    // you might want to track which table each field belongs to\n    return this.getRightmostTableAlias(query);\n  }\n\n  private formatValue(value: any): string {\n    if (typeof value === 'string') {\n      return `'${value}'`;\n    }\n    return String(value);\n  }\n\n  private generateSubquerySQL(query: Query<any>): string {\n    // Generate a basic SELECT * from the subquery to get its full SQL\n    if (query instanceof BaseQuery) {\n      return `SELECT * FROM ${query.tableName} AS ${query.tableAlias}`;\n    } else if (query instanceof CompoundQuery) {\n      const source = this.getSource(query);\n      return `SELECT * FROM ${source}`;\n    } else if (query instanceof Where) {\n      const source = this.getSource(query.query);\n      const whereClause = this.getWhereClause(query);\n      let sql = `SELECT * FROM ${source}`;\n      if (whereClause) {\n        sql += ` WHERE ${whereClause}`;\n      }\n      return sql;\n    }\n    return 'SELECT *';\n  }\n\n  toString() {\n    // Handle subquery case\n    if (this.subquery && this.subqueryAlias) {\n      const subquerySQL = this.generateSubquerySQL(this.subquery);\n      const source = this.getSource(this.query);\n      const whereClause = this.getWhereClause(this.query);\n\n      let sql = `SELECT (${subquerySQL}) AS ${this.subqueryAlias} FROM ${source}`;\n      if (whereClause) {\n        sql += ` WHERE ${whereClause}`;\n      }\n      return sql;\n    }\n\n    // Handle regular field selection\n    const fields = Object.entries(this.fields)\n      .map(([column, alias]) => {\n        if (column === alias) {\n          return column;\n        }\n        return `${column} AS ${alias}`;\n      })\n      .join(\", \");\n    const source = this.getSource(this.query);\n    const whereClause = this.getWhereClause(this.query);\n\n    let sql = `SELECT ${fields} FROM ${source}`;\n    if (whereClause) {\n      sql += ` WHERE ${whereClause}`;\n    }\n    return sql;\n  }\n}\n"],"names":["CompoundQuery","BaseQuery","Where","AliasGenerator","counter","generate","Select","getSource","query","tableName","tableAlias","left","query1","right","query2","on","Object","entries","joinInfo","condition","map","key","value","leftAlias","getRightmostTableAlias","rightAlias","String","join","joinType","formatCondition","Array","isArray","length","operator","operatorValue","formatValue","v","getWhereClause","or","inlineOrConditions","mainConditions","conditions","getTableAliasForField","inlineOrClauses","orCondition","orClauses","chainedOrConditions","orConditions","allOrConditions","allConditions","nestedWhere","_field","generateSubquerySQL","source","whereClause","sql","toString","subquery","subqueryAlias","subquerySQL","fields","column","alias","select","forEach","field"],"mappings":"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"}