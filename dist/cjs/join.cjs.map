{"version":3,"sources":["../../src/join.ts"],"sourcesContent":["import { CompoundQuery } from \"./compoundQuery.js\";\nimport { Query } from \"./query.js\";\n\nexport type JoinType = 'INNER' | 'LEFT';\n\nexport class Join<T extends object, U extends object> {\n  readonly query1: Query<T>;\n  readonly query2: Query<U>;\n  readonly joinType: JoinType;\n  condition?: Partial<Record<keyof T, keyof U>>;\n\n  constructor(query1: Query<T>, query2: Query<U>, joinType: JoinType = 'LEFT') {\n    this.query1 = query1;\n    this.query2 = query2;\n    this.joinType = joinType;\n  }\n\n  on(condition: Partial<Record<keyof T, keyof U>>): Query<T & U> {\n    this.condition = condition;\n    return new CompoundQuery<T, U>(this.query1, this.query2, this);\n  }\n}\n"],"names":["Join","on","condition","CompoundQuery","query1","query2","joinType"],"mappings":";;;;+BAKaA;;;eAAAA;;;+BALiB;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,OAAN,MAAMA;IAYXC,GAAGC,SAA4C,EAAgB;QAC7D,IAAI,CAACA,SAAS,GAAGA;QACjB,OAAO,IAAIC,4BAAa,CAAO,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI;IAC/D;IATA,YAAYD,MAAgB,EAAEC,MAAgB,EAAEC,WAAqB,MAAM,CAAE;QAL7E,uBAASF,UAAT,KAAA;QACA,uBAASC,UAAT,KAAA;QACA,uBAASC,YAAT,KAAA;QACAJ,uBAAAA,aAAAA,KAAAA;QAGE,IAAI,CAACE,MAAM,GAAGA;QACd,IAAI,CAACC,MAAM,GAAGA;QACd,IAAI,CAACC,QAAQ,GAAGA;IAClB;AAMF"}