{"version":3,"sources":["../../src/query.ts"],"sourcesContent":["import { Join } from \"./join.js\";\nimport { Select } from \"./select.js\";\nimport { Where, WhereCondition } from \"./where.js\";\n\nclass AliasGenerator {\n  private static counter = 0;\n\n  static generate(): string {\n    return `t${++this.counter}`;\n  }\n\n  static reset(): void {\n    this.counter = 0;\n  }\n}\n\nexport interface Query<T extends object> {\n  select(fields: Array<keyof T>): Select<T>;\n  select(fields: Partial<Record<keyof T, string>>): Select<T>;\n  select(subquery: Query<any>, alias?: string): Select<T>;\n  select(fields: Array<keyof T> | Partial<Record<keyof T, string>> | Query<any>, alias?: string): Select<T>;\n\n  join<U extends object>(tableName: string, tableAlias?: string): Join<T, U>;\n  innerJoin<U extends object>(tableName: string, tableAlias?: string): Join<T, U>;\n  leftJoin<U extends object>(tableName: string, tableAlias?: string): Join<T, U>;\n  where(conditions: WhereCondition<T>): Where<T>;\n}\n\nexport class BaseQuery<T extends object> implements Query<T> {\n  readonly tableName: string;\n  readonly tableAlias: string;\n  static from<T extends object>(tableName: string, tableAlias?: string) {\n    return new BaseQuery<T>(tableName, tableAlias || AliasGenerator.generate());\n  }\n  constructor(tableName: string, tableAlias?: string) {\n    this.tableName = tableName;\n    this.tableAlias = tableAlias || AliasGenerator.generate();\n  }\n  select(fields: Array<keyof T>): Select<T>;\n  select(fields: Partial<Record<keyof T, string>>): Select<T>;\n  select(subquery: Query<any>, alias?: string): Select<T>;\n  select(fields: Array<keyof T> | Partial<Record<keyof T, string>> | Query<any>, alias?: string): Select<T> {\n    return new Select<T>(this, fields, alias);\n  }\n\n  join<U extends object>(tableName: string, tableAlias?: string): Join<T, U> {\n    const newQuery = new BaseQuery<U>(tableName, tableAlias || AliasGenerator.generate());\n    return new Join<T, U>(this, newQuery, 'INNER');\n  }\n\n  innerJoin<U extends object>(tableName: string, tableAlias?: string): Join<T, U> {\n    return this.join<U>(tableName, tableAlias);\n  }\n\n  leftJoin<U extends object>(tableName: string, tableAlias?: string): Join<T, U> {\n    const newQuery = new BaseQuery<U>(tableName, tableAlias || AliasGenerator.generate());\n    return new Join<T, U>(this, newQuery, 'LEFT');\n  }\n\n  where(conditions: WhereCondition<T>): Where<T> {\n    return new Where<T>(this, conditions);\n  }\n}\n"],"names":["BaseQuery","AliasGenerator","generate","counter","reset","from","tableName","tableAlias","select","fields","alias","Select","join","newQuery","Join","innerJoin","leftJoin","where","conditions","Where"],"mappings":";;;;+BA4BaA;;;eAAAA;;;sBA5BQ;wBACE;uBACe;;;;;;;;;;;;;;AAEtC,IAAA,AAAMC,iBAAN,MAAMA;IAGJ,OAAOC,WAAmB;QACxB,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,CAACC,OAAO,EAAE;IAC7B;IAEA,OAAOC,QAAc;QACnB,IAAI,CAACD,OAAO,GAAG;IACjB;AACF;AATE,iBADIF,gBACWE,WAAU;AAuBpB,IAAA,AAAMH,YAAN,MAAMA;IAGX,OAAOK,KAAuBC,SAAiB,EAAEC,UAAmB,EAAE;QACpE,OAAO,IAAIP,UAAaM,WAAWC,cAAcN,eAAeC,QAAQ;IAC1E;IAQAM,OAAOC,MAAsE,EAAEC,KAAc,EAAa;QACxG,OAAO,IAAIC,cAAM,CAAI,IAAI,EAAEF,QAAQC;IACrC;IAEAE,KAAuBN,SAAiB,EAAEC,UAAmB,EAAc;QACzE,MAAMM,WAAW,IAAIb,UAAaM,WAAWC,cAAcN,eAAeC,QAAQ;QAClF,OAAO,IAAIY,UAAI,CAAO,IAAI,EAAED,UAAU;IACxC;IAEAE,UAA4BT,SAAiB,EAAEC,UAAmB,EAAc;QAC9E,OAAO,IAAI,CAACK,IAAI,CAAIN,WAAWC;IACjC;IAEAS,SAA2BV,SAAiB,EAAEC,UAAmB,EAAc;QAC7E,MAAMM,WAAW,IAAIb,UAAaM,WAAWC,cAAcN,eAAeC,QAAQ;QAClF,OAAO,IAAIY,UAAI,CAAO,IAAI,EAAED,UAAU;IACxC;IAEAI,MAAMC,UAA6B,EAAY;QAC7C,OAAO,IAAIC,YAAK,CAAI,IAAI,EAAED;IAC5B;IA3BA,YAAYZ,SAAiB,EAAEC,UAAmB,CAAE;QALpD,uBAASD,aAAT,KAAA;QACA,uBAASC,cAAT,KAAA;QAKE,IAAI,CAACD,SAAS,GAAGA;QACjB,IAAI,CAACC,UAAU,GAAGA,cAAcN,eAAeC,QAAQ;IACzD;AAyBF"}